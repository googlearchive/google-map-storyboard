<!--
The 'google-map-storyboard' renders a Google Map with 'google-map-scene' elements.

<b>Example</b> - Add scenes to the map and traverse them linearly:

    <style>
      google-map-storyboard {
        height: 600px;
      }
    </style>
    <google-map-storyboard>
      <google-map-scene address="Sydney, Australia" zoom="5">This is Sydney!</google-map-scene>
      <google-map-scene address="Zurich, Switzerland"></google-map-scene>
    </google-map-storyboard>


@element google-map-storyboard
@homepage https://github.com/googlemaps/google-map-storyboard
-->
<!--
Fired when the storybord's google map is ready to be rendered.

@event google-map-storyboard-ready
-->
<link rel="import" href="bower_components/polymer/polymer.html">
<link rel="import" href="bower_components/google-apis/google-apis.html">
<link rel="import" href="google-map-scene.html">

<polymer-element name="google-map-storyboard" attributes="apiKey current">
<template>
  <style>

    :host {
      position: relative;
      display: block;
      height: 100%;
    }

    #map {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

    #sceneMedia {
      display: inline-block;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      max-width: 300px;
      word-break: break-all; 
      word-wrap: break-word;
      background-color: #ffffff;
      border: 1px solid black;
    }

    #image {
      display: inline-block;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
        
    button {
      opacity: 0.5;
      font-size: 1.5em;
      outline: none;
      border-radius: 50%;
      background-color: #fff;
    }

    button:hover {
      opacity: 1;
    }
    
  </style>

  <google-maps-api apiKey="{{apiKey}}" version="3.exp" libraries="places,geometry" on-api-load="{{mapApiLoaded}}"></google-maps-api>

  <div id="map"></div>
  <div id="sceneMedia"></div>â€‹
  <div id="image"></div>

  <content id="scenes" select="google-map-scene"></content>
</template>


<script>
(function() {
  Polymer({

    /**
     * Array of the google-map-scenes contained within the storyboard.
     * 
     * @property scenes
     * @type Array.google-map-scene
     * @default null
     */
    scenes: null,

    /**
     * The google map used in the storyboard.
     * 
     * @property map
     * @type google.maps.Map
     * @default null
     */
    map: null,

    /**
     * The Google Map API key. To obtain an API key, 
     * see developers.google.com/maps/documentation/javascript/tutorial#api_key.
     * 
     * @attribute apiKey
     * @type string
     * @default null
     */
    apiKey: null,

    publish: {
      /**
       * The id of the scene to be shown.
       * 
       * @attribute current
       * @type String
       * @default null
       */
      current: {value: null, reflect: true}
    },

    /**
     * The index of the current scene.
     * 
     * @property index
     * @type Number
     * @default 0
     */
    index: 0,

    /**
     * The current scene. Initialised to the first scene.
     *
     * @property currentScene
     * @type google-map-scene
     * @default null
     */
    currentScene: null,

    mapApiLoaded: function() {
      this.updateScenes();
    },

    initialiseMap: function() {
      if (!this.map) {
        this.indexChanged();
        var mapOptions = {
          center: this.currentScene.location,
          zoom: this.currentScene.zoom
        };
        this.map = new google.maps.Map(this.$.map, mapOptions);
        this.makeButton("prev", "Previous", "<", 
            google.maps.ControlPosition.LEFT_CENTER, this.getPrev);
        this.makeButton("next", "Next", ">", 
            google.maps.ControlPosition.RIGHT_CENTER, this.getNext);
        this.updateControls();
        this.fire('google-map-storyboard-ready');
      }
    },

    updateScenes: function() {
      this.scenes = Array.prototype.slice.call(
          this.$.scenes.getDistributedNodes());
      this.updateLocations();
    },

    updateContent: function() {
      var media = this.$.sceneMedia;
      var image = this.$.image
      if (this.currentScene.isImage === true) {
        image.innerHTML = this.currentScene.innerHTML;
        media.style.display = "none";
        image.style.display = "block";
      }
      else {
        media.innerHTML = this.currentScene.innerHTML;
window.console.log(media.innerHTML);
        image.style.display = "none";
        media.style.display = "block";
      }
    },

    updateLocations: function() {
      this.geocoder = this.geocoder || new google.maps.Geocoder();
      for (var i = 0; i < this.scenes.length; ++i) {
        var address = this.scenes[i].address;
        (function(index) {
          this.geocoder.geocode( {address: address}, function(place, status) {
            if (status == google.maps.GeocoderStatus.OK) {
              var scene = this.scenes[index];
              scene.location = place[0].geometry.location;
              if (scene === this.currentScene || this.index === index) {
                this.index = index;
                this.initialiseMap();
              }
            }
          }.bind(this));
          this.updateContent();
        }.bind(this))(i);
      }
    },

    currentChanged: function() {
      var scene = document.getElementById(this.current);
      if (!scene) {
        return;
      }
      this.currentScene = scene;
      this.index = (this.scenes && this.scenes.indexOf(scene)) || null;
    },

    indexChanged: function() {
      this.currentScene = (this.scenes && this.scenes[this.index]) || 
          this.currentScene;
      this.current = this.currentScene.id;
      if (this.map) {
        this.map.panTo(this.currentScene.location || this.map.getCenter());
        this.map.setZoom(this.currentScene.zoom);
        this.updateControls();
      }
    },

    getPrev: function() {
      if (this.index > 0) {
        this.index--;
      }
    },

    getNext: function() {
      if (this.index < this.scenes.length - 1) {
        this.index++;
      }
    },

    updateControls: function() {
      var control = this.map.controls[google.maps.ControlPosition.LEFT_CENTER];
      if (this.index < 1) {
        this.prevButton = this.prevButton || control.removeAt(0);
      } else if (this.prevButton) {
        control.insertAt(0, this.prevButton);
        this.prevButton = null;
      }

      control = this.map.controls[google.maps.ControlPosition.RIGHT_CENTER];
      if (this.index > this.scenes.length - 2) {
        this.nextButton = this.nextButton || control.removeAt(0);
      } else if (this.nextButton) {
        control.insertAt(0, this.nextButton);
        this.nextButton = null;
      }
    },

    makeButton: function(id, title, text, controlPosition, onClick) {
      var button = document.createElement('button');
      button.id = id;
      button.title = title;
      var content = document.createTextNode(text);
      button.appendChild(content);
      google.maps.event.addDomListener(button, 'click', onClick.bind(this));
      this.map.controls[controlPosition].insertAt(0, button);
    }


  });
})();
</script>
</polymer-element>
